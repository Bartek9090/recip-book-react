{"ast":null,"code":"var _jsxFileName = \"C:\\\\programowanie\\\\Kursy\\\\React\\\\Project\\\\recip-book-app\\\\recip-book\\\\src\\\\pages\\\\RecipePage.js\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport Search from \"../components/Search\";\nimport RecipeList from \"../components/RecipeList\";\nimport MainNavigation from \"../components/MainNavigation\";\nimport SingleRecipe from \"../components/SingleRecipe\"; // Dodaliśmy import\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function RecipePage() {\n  _s();\n  const [search, setSearch] = useState(\"\");\n  const [recipes, setRecipes] = useState([]);\n  const [selectedRecipe, setSelectedRecipe] = useState(null);\n  const [searchClicked, setSearchClicked] = useState(false);\n  async function getRecipesByIngredients() {\n    try {\n      const resp = await axios.get(\"http://localhost:4000/recipesByIngredients\", {\n        params: {\n          search\n        }\n      });\n      setRecipes(resp.data);\n    } catch (error) {\n      console.error(\"Error fetching recipes:\", error);\n    }\n  }\n  const handleRecipeSelect = recipe => {\n    setSelectedRecipe(recipe);\n  };\n  const handleChange = e => {\n    setSearch(e.target.value);\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (search.trim() !== \"\") {\n      console.log(\"jestem tutaj recipe page\");\n      await getRecipesByIngredients(search);\n      setSearchClicked(true);\n    } else {\n      alert(\"Search field is empty. Please enter ingredients.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainNavigation, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      search: search,\n      handleChange: handleChange,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(RecipeList, {\n      recipes: recipes,\n      searchTerm: search,\n      searchClicked: searchClicked,\n      onRecipeSelect: handleRecipeSelect\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), selectedRecipe && /*#__PURE__*/_jsxDEV(SingleRecipe, {\n      recipe: selectedRecipe\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 26\n    }, this), \" \"]\n  }, void 0, true);\n}\n\n// export default function RecipePage() {\n//   const [search, setSearch] = useState(\"\");\n//   const [recipes, setRecipes] = useState([]);\n//   const [searchClicked, setSearchClicked] = useState(false);\n\n//   async function getRecipesByIngredients() {\n//     try {\n//       const resp = await axios.get(\n//         \"http://localhost:4000/recipesByIngredients\",\n//         {\n//           params: { search },\n//         }\n//       );\n//       setRecipes(resp.data);\n//     } catch (error) {\n//       console.error(\"Error fetching recipes:\", error);\n//     }\n//   }\n\n//   const handleChange = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (search.trim() !== \"\") {\n//       console.log(\"jestem tutaj recipe page\");\n//       await getRecipesByIngredients(search);\n//       setSearchClicked(true);\n//     } else {\n//       alert(\"Search field is empty. Please enter ingredients.\");\n//     }\n//   };\n\n//   return (\n//     <>\n//       <MainNavigation />\n//       <Search\n//         search={search}\n//         handleChange={handleChange}\n//         handleSubmit={handleSubmit}\n//       />\n//       <RecipeList\n//         recipes={recipes}\n//         searchTerm={search}\n//         searchClicked={searchClicked}\n//       />\n//     </>\n//   );\n// }\n// async function getRecipesByIngredients() {\n//   try {\n//     const resp = await axios.get(`/recipesByIngredients?search=${search}`);\n\n//     setRecipes(resp.data);\n//   } catch (error) {\n//     console.error(\"Error fetching recipes:\", error);\n//   }\n// }\n\n// sprawdzamy całą  odpowiedź w api\n\n// export default function RecipePage() {\n//   const [search, setSearch] = useState(\"\");\n//   const [recipes, setRecipes] = useState([]);\n//   const [searchClicked, setSearchClicked] = useState(false);\n\n//   async function getRecipesByIngredients() {\n//     try {\n//       const resp = await axios.get(\n//         \"https://api.spoonacular.com/recipes/findByIngredients\",\n//         {\n//           params: {\n//             apiKey: \"164af9704a534bacb1c4fbb6086ed10b\",\n//             ingredients: search,\n//           },\n//         }\n//       );\n\n//       // Wyświetl pełną odpowiedź w konsoli\n//       console.log(\"Full API response:\", resp);\n\n//       setRecipes(resp.data);\n//     } catch (error) {\n//       console.error(\"Error fetching recipes:\", error);\n//     }\n//   }\n\n//   const handleChange = (e) => {\n//     setSearch(e.target.value);\n//   };\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     if (search.trim() !== \"\") {\n//       console.log(\"jestem tutaj recipe page\");\n//       await getRecipesByIngredients(search);\n//       setSearchClicked(true);\n//     } else {\n//       alert(\"Search field is empty. Please enter ingredients.\");\n//     }\n//   };\n_s(RecipePage, \"co3grYgYgYO4WC3OtEvzent18ec=\");\n_c = RecipePage;\nvar _c;\n$RefreshReg$(_c, \"RecipePage\");","map":{"version":3,"names":["axios","useState","Search","RecipeList","MainNavigation","SingleRecipe","jsxDEV","_jsxDEV","Fragment","_Fragment","RecipePage","_s","search","setSearch","recipes","setRecipes","selectedRecipe","setSelectedRecipe","searchClicked","setSearchClicked","getRecipesByIngredients","resp","get","params","data","error","console","handleRecipeSelect","recipe","handleChange","e","target","value","handleSubmit","preventDefault","trim","log","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","searchTerm","onRecipeSelect","_c","$RefreshReg$"],"sources":["C:/programowanie/Kursy/React/Project/recip-book-app/recip-book/src/pages/RecipePage.js"],"sourcesContent":["import axios from \"axios\";\r\nimport { useState } from \"react\";\r\nimport Search from \"../components/Search\";\r\nimport RecipeList from \"../components/RecipeList\";\r\nimport MainNavigation from \"../components/MainNavigation\";\r\nimport SingleRecipe from \"../components/SingleRecipe\"; // Dodaliśmy import\r\n\r\nexport default function RecipePage() {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [recipes, setRecipes] = useState([]);\r\n  const [selectedRecipe, setSelectedRecipe] = useState(null);\r\n  const [searchClicked, setSearchClicked] = useState(false);\r\n\r\n  async function getRecipesByIngredients() {\r\n    try {\r\n      const resp = await axios.get(\r\n        \"http://localhost:4000/recipesByIngredients\",\r\n        {\r\n          params: { search },\r\n        }\r\n      );\r\n      setRecipes(resp.data);\r\n    } catch (error) {\r\n      console.error(\"Error fetching recipes:\", error);\r\n    }\r\n  }\r\n\r\n  const handleRecipeSelect = (recipe) => {\r\n    setSelectedRecipe(recipe);\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (search.trim() !== \"\") {\r\n      console.log(\"jestem tutaj recipe page\");\r\n      await getRecipesByIngredients(search);\r\n      setSearchClicked(true);\r\n    } else {\r\n      alert(\"Search field is empty. Please enter ingredients.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <MainNavigation />\r\n      <Search\r\n        search={search}\r\n        handleChange={handleChange}\r\n        handleSubmit={handleSubmit}\r\n      />\r\n      <RecipeList\r\n        recipes={recipes}\r\n        searchTerm={search}\r\n        searchClicked={searchClicked}\r\n        onRecipeSelect={handleRecipeSelect}\r\n      />\r\n      {selectedRecipe && <SingleRecipe recipe={selectedRecipe} />}{\" \"}\r\n      {/* Przekazujemy przepis jako props */}\r\n    </>\r\n  );\r\n}\r\n\r\n// export default function RecipePage() {\r\n//   const [search, setSearch] = useState(\"\");\r\n//   const [recipes, setRecipes] = useState([]);\r\n//   const [searchClicked, setSearchClicked] = useState(false);\r\n\r\n//   async function getRecipesByIngredients() {\r\n//     try {\r\n//       const resp = await axios.get(\r\n//         \"http://localhost:4000/recipesByIngredients\",\r\n//         {\r\n//           params: { search },\r\n//         }\r\n//       );\r\n//       setRecipes(resp.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching recipes:\", error);\r\n//     }\r\n//   }\r\n\r\n//   const handleChange = (e) => {\r\n//     setSearch(e.target.value);\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (search.trim() !== \"\") {\r\n//       console.log(\"jestem tutaj recipe page\");\r\n//       await getRecipesByIngredients(search);\r\n//       setSearchClicked(true);\r\n//     } else {\r\n//       alert(\"Search field is empty. Please enter ingredients.\");\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <>\r\n//       <MainNavigation />\r\n//       <Search\r\n//         search={search}\r\n//         handleChange={handleChange}\r\n//         handleSubmit={handleSubmit}\r\n//       />\r\n//       <RecipeList\r\n//         recipes={recipes}\r\n//         searchTerm={search}\r\n//         searchClicked={searchClicked}\r\n//       />\r\n//     </>\r\n//   );\r\n// }\r\n// async function getRecipesByIngredients() {\r\n//   try {\r\n//     const resp = await axios.get(`/recipesByIngredients?search=${search}`);\r\n\r\n//     setRecipes(resp.data);\r\n//   } catch (error) {\r\n//     console.error(\"Error fetching recipes:\", error);\r\n//   }\r\n// }\r\n\r\n// sprawdzamy całą  odpowiedź w api\r\n\r\n// export default function RecipePage() {\r\n//   const [search, setSearch] = useState(\"\");\r\n//   const [recipes, setRecipes] = useState([]);\r\n//   const [searchClicked, setSearchClicked] = useState(false);\r\n\r\n//   async function getRecipesByIngredients() {\r\n//     try {\r\n//       const resp = await axios.get(\r\n//         \"https://api.spoonacular.com/recipes/findByIngredients\",\r\n//         {\r\n//           params: {\r\n//             apiKey: \"164af9704a534bacb1c4fbb6086ed10b\",\r\n//             ingredients: search,\r\n//           },\r\n//         }\r\n//       );\r\n\r\n//       // Wyświetl pełną odpowiedź w konsoli\r\n//       console.log(\"Full API response:\", resp);\r\n\r\n//       setRecipes(resp.data);\r\n//     } catch (error) {\r\n//       console.error(\"Error fetching recipes:\", error);\r\n//     }\r\n//   }\r\n\r\n//   const handleChange = (e) => {\r\n//     setSearch(e.target.value);\r\n//   };\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     if (search.trim() !== \"\") {\r\n//       console.log(\"jestem tutaj recipe page\");\r\n//       await getRecipesByIngredients(search);\r\n//       setSearchClicked(true);\r\n//     } else {\r\n//       alert(\"Search field is empty. Please enter ingredients.\");\r\n//     }\r\n//   };\r\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,cAAc,MAAM,8BAA8B;AACzD,OAAOC,YAAY,MAAM,4BAA4B,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEvD,eAAe,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACnC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAACa,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACe,cAAc,EAAEC,iBAAiB,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,KAAK,CAAC;EAEzD,eAAemB,uBAAuBA,CAAA,EAAG;IACvC,IAAI;MACF,MAAMC,IAAI,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAC1B,4CAA4C,EAC5C;QACEC,MAAM,EAAE;UAAEX;QAAO;MACnB,CACF,CAAC;MACDG,UAAU,CAACM,IAAI,CAACG,IAAI,CAAC;IACvB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF;EAEA,MAAME,kBAAkB,GAAIC,MAAM,IAAK;IACrCX,iBAAiB,CAACW,MAAM,CAAC;EAC3B,CAAC;EAED,MAAMC,YAAY,GAAIC,CAAC,IAAK;IAC1BjB,SAAS,CAACiB,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC3B,CAAC;EAED,MAAMC,YAAY,GAAG,MAAOH,CAAC,IAAK;IAChCA,CAAC,CAACI,cAAc,CAAC,CAAC;IAClB,IAAItB,MAAM,CAACuB,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACxBT,OAAO,CAACU,GAAG,CAAC,0BAA0B,CAAC;MACvC,MAAMhB,uBAAuB,CAACR,MAAM,CAAC;MACrCO,gBAAgB,CAAC,IAAI,CAAC;IACxB,CAAC,MAAM;MACLkB,KAAK,CAAC,kDAAkD,CAAC;IAC3D;EACF,CAAC;EAED,oBACE9B,OAAA,CAAAE,SAAA;IAAA6B,QAAA,gBACE/B,OAAA,CAACH,cAAc;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAClBnC,OAAA,CAACL,MAAM;MACLU,MAAM,EAAEA,MAAO;MACfiB,YAAY,EAAEA,YAAa;MAC3BI,YAAY,EAAEA;IAAa;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,eACFnC,OAAA,CAACJ,UAAU;MACTW,OAAO,EAAEA,OAAQ;MACjB6B,UAAU,EAAE/B,MAAO;MACnBM,aAAa,EAAEA,aAAc;MAC7B0B,cAAc,EAAEjB;IAAmB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpC,CAAC,EACD1B,cAAc,iBAAIT,OAAA,CAACF,YAAY;MAACuB,MAAM,EAAEZ;IAAe;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAAE,GAAG;EAAA,eAEhE,CAAC;AAEP;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA/B,EAAA,CAhKwBD,UAAU;AAAAmC,EAAA,GAAVnC,UAAU;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}